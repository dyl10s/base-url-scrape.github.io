@page "/"
@inject HttpClient client
@inject IJSRuntime JSRuntime

<div class="row pt-5">
    <div class="col-12 text-center">
        <h3>Base Url Crawler</h3>
    </div>
</div>

<div class="row pt-3">
    <div class="col-7">
        <input @bind="StartingUrl" class="form-control" placeholder="URL ex. https://www.google/com"/>
    </div>
    <div class="col-5">
        @if (running)
        {
            <button class="btn btn-danger btn-block" @onclick="stopSearch">Stop Running</button>
        }
        else
        {
            <button class="btn btn-primary btn-block" @onclick="startSearch">Find Base Urls</button>
        }
    </div>
</div>

<div class="row pt-3 justify-content-center">
    <div class="col-md-4 col-sm-6 text-center">
        <h4 class="w-100">Current Base Urls Found</h4>
        <label class="w-100">@baseUrls.Count</label>
    </div>
    <div class="col-md-4 col-sm-6 text-center">
        <h4 class="w-100">Current Base Urls To Search</h4>
        <label class="w-100">@needSearchUrl.Count</label>
    </div>
    <div class="col-md-4 col-sm-12 text-center">
        <h4 class="w-100">Current Base Url</h4>
        <label class="w-100">@currentBaseUrl</label>
    </div>
</div>

<div class="row pt-5">
    <div class="col-12">
        <div class="overflow-auto" id="outputPlot">
            
        </div>
    </div>
</div>

@code{
    string StartingUrl = "https://www.google.com";
    static Queue<String> needSearchUrl = new Queue<string>();
    static Dictionary<string, string> baseUrls = new Dictionary<string, string>();
    MarkupString output = (MarkupString)"";
    string currentBaseUrl = "";
    bool running = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            client.Timeout = new TimeSpan(0, 0, 5);
        }
    }

    void stopSearch()
    {
        running = false;
    }

    async void startSearch()
    {
        needSearchUrl = new Queue<string>();
        baseUrls = new Dictionary<string, string>();

        running = true;
        output = (MarkupString)"";
        this.StateHasChanged();

        Uri url;
        Uri.TryCreate(StartingUrl, UriKind.Absolute, out url);
        if(url == null)
        {
            running = false;
            return;
        }
        var baseurl = url.Scheme + "://" + url.Host;
        baseUrls.Add(baseurl, "");
        needSearchUrl.Enqueue(baseurl);

        while(needSearchUrl.Count > 0 && running)
        {
            var curSearch = needSearchUrl.Dequeue();
            await searchBaseUrl(curSearch);
            JSRuntime.InvokeVoidAsync("plotData", "outputPlot", baseUrls.Keys.ToArray(), baseUrls.Values.ToArray());
            this.StateHasChanged();
        }
    }

    async Task searchBaseUrl(string baseUrl)
    {
        try
        {
            currentBaseUrl = baseUrl;
            var request = new HttpRequestMessage()
            {
                RequestUri = new Uri("http://no-cors.ml/no-cors.php?url=" + baseUrl),
                Method = HttpMethod.Get
            };
            var siteResponse = await client.SendAsync(request);
            var siteHtml = await siteResponse.Content.ReadAsStringAsync();

            var items = siteHtml.splitString("href=\"")[1..];
            foreach (var item in items)
            {
                Uri newUrl;
                Uri.TryCreate(item, UriKind.Absolute, out newUrl);
                if (newUrl != null)
                {
                    var newBaseurl = newUrl.Scheme + "://" + newUrl.Host;
                    if (newUrl.Scheme == "https" && !baseUrls.ContainsKey(newBaseurl))
                    {
                        baseUrls.Add(newBaseurl, baseUrl);
                        needSearchUrl.Enqueue(newBaseurl);
                    }
                }
            }
        }
        catch(Exception e)
        {
        }
    }
}
